# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ 8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
# –≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–π
# –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7) —Å–æ—Ö—Ä–∞–Ω—è—è
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤
# —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
# –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

from Path_File import PathFile

import json
import os


class User:
    def __init__(self, name: str, the_id: int, level:int = 1, authorize_level:str = 8):
        if not isinstance(name, str) or not name.isalpha():
            raise ValueError('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞')
        self.name = name
        if not isinstance(the_id, int) or the_id <= 0:
            raise ValueError('–õ–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        self.the_id = the_id
        if not isinstance(level, int) or level not in range(1, authorize_level):
            raise ValueError(f'–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ {authorize_level}')
        self.level = level

    def __str__(self):
        return f'{self.name = }, {self.the_id = }, {self.level = }'
    
    def __eq__(self, other):
        return self.name == other.name and self.the_id == other.the_id

    def __hash__(self):
        return hash(self.name) + hash(self.the_id)


def load_json(file):
    f1 = PathFile(file)
    new_directory = f1.get_name_file_no_exten()
    directory = f1.get_full_name_file_no_exten()
    name_directory =f1.get_path_file()
    path = f'{directory}/{new_directory}_json.json'
    if (new_directory not in os.listdir(name_directory)):
        os.mkdir(directory)

    if os.path.exists(path):
        with open(path, 'r', encoding='UTF-8') as file:
            data = json.load(file)
    else:
        data = {}
    return data


def worker():
    while True:
        try:
            name = input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ')
            the_id = int(input('–í–≤–µ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: '))
            level = int(input('–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: '))
            return User(name, the_id, level)
        except ValueError as e:
            print(e)


def save_json(user_db,file):

    f1 = PathFile(file)
    new_directory = f1.get_name_file_no_exten()
    directory = f1.get_full_name_file_no_exten()
    name_directory =f1.get_path_file()
    path = f'{directory}/{new_directory}_json.json'

    if (new_directory not in os.listdir(name_directory)):
        os.mkdir(directory)
    with open(path, 'w', encoding='UTF-8') as file:
        json.dump(user_db, file, indent=4, ensure_ascii=False)


if __name__ == '__main__':
    
    user_db = load_json(__file__)
    new_user = worker()
    if str(new_user.the_id) in user_db:
        raise Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º ID —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É')
    else:
        user_db[new_user.the_id] = {'name': new_user.name,'level': new_user.level}
    save_json(user_db,__file__)

