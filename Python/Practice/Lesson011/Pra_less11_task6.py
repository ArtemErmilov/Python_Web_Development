# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É.
# üìå –î–æ–±–∞–≤—å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø–ª–æ—â–∞–¥–∏
# üìå –î–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —à–µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

from functools import total_ordering

@total_ordering
class Rectangle:
    """
    –ö–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    """

    def __init__(self,l:float,h = None):
        self.l = l
        self.h = h if h else l
        if (l<=0 or h<=0):
            raise TypeError('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0')
        self.perimeter = self.perimeter()
        self.square = self.square()
        
        
    def perimeter(self):
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞.
        """
        return 2*(self.l+self.h)
    
    def square(self):
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞.
        """
        return self.l*self.h
    
    def __str__(self) -> str:
        return f'–í—ã—Å–æ—Ç–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ = {self.l}, –î–ª–∏–Ω–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ = {self.h}'
    
    def __add__ (self, other):
        """
        –ú–µ—Ç–æ–¥ —Å–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω–∞–º.
        """
        if isinstance(other,Rectangle):
            l = self.l + other.l
            h = self.h + other.h
            return Rectangle(l,h)
        raise TypeError
    
    def __sub__ (self, other):
        """
        –ú–µ—Ç–æ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω–∞–º.
        """
        if isinstance(other,Rectangle):
            if(self.l > other.l or self.h > other.h):
                l = self.l - other.l
                h = self.h - other.h
                return Rectangle(l,h)
        raise TypeError
    
    def __eq__(self,other):
        """
        –ú–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.
        """
        if isinstance(other,Rectangle):
            return self.square == other.square
        raise TypeError
    
    def __gt__(self,other):
        """
        –ú–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–µ –¥–≤—É—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.
        """
        if isinstance(other,Rectangle):
            return self.square > other.square
        raise TypeError

    # def __le__ (self,other):
    #     if isinstance(other,Rectangle):
    #         return self.square >= other.square
    #     raise TypeError

    

p1 = Rectangle(5,6)
p2 = Rectangle(10,8)



print(p1 == p2)
print(p1 > p2)
print(p1 < p2)
print(p1 >= p2)
print(p1 <= p2)
print(p1 != p2)