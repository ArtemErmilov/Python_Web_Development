# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 

# –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.

# –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
#–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç: 
# ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞, 
# ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, 
# ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞, 
# ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
# üìå–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

from Path_File import PathFile
import os

from collections import namedtuple
import logging

import argparse

file = PathFile(__file__).get_new_folder_full_name_file_new_exten('txt',add_to_name='logg')

logger = logging.getLogger(__name__)
my_format = '{msg}'
logging.basicConfig(filename=file,filemode='w', 
                    level=logging.INFO, style='{', format=my_format) # encoding = 'UTF-8'

def file_viewer_logger(path_file:str):

    path_list = os.walk(path_file) 
    Data_ffl = namedtuple('Data_ffl', ['type', 'name', 'arent_direc', 'extension'], defaults=[None, None, None,None])       

    for dir_path, dir_name, file_name in  path_list:

        p = file_name + dir_name

        
        for obj in p:
            
            obj = os.path.join(dir_path, obj)

            if(os.path.isdir(obj)):# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–∞–ø–∫–æ–π
                type_f = '–ü–∞–ø–∫–∞'
                parent_direc = os.path.dirname(obj)
                dir_name = os.path.basename(obj)
                data_file = Data_ffl(type_f,dir_name,parent_direc)

            elif(os.path.isfile(obj)): #–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º
                type_f = '–§–∞–π–ª'
                parent_direc = os.path.dirname(obj)
                f_name,extension = os.path.splitext(os.path.basename(obj))                
                data_file = Data_ffl(type_f,f_name,parent_direc, extension)
           
            elif(os.path.islink(obj)): #–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—Å—ã–ª–∫–æ–π
                type_f = '–°—Å—ã–ª–∫–∞'
                parent_direc = os.path.dirname(obj)
                link_name = os.path.basename(obj)
                data_file = Data_ffl(type_f,f_name,link_name)
              
            else:
                type_f ='–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                data_file = Data_ffl(type_f)
            if (data_file.extension):
                msg = f'–¢–∏–ø:{data_file.type}, –ù–∞–∑–≤–∞–Ω–∏–µ:{data_file.name},  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥:{data_file.arent_direc}'
            else:
                msg = f'–¢–∏–ø:{data_file.type}, –ù–∞–∑–≤–∞–Ω–∏–µ:{data_file.name}, –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:{data_file.extension}  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥:{data_file.arent_direc},'
            logger.info(msg)
            

if __name__ == '__main__':


    parser = argparse.ArgumentParser()
    parser.add_argument('link', metavar='links',nargs = "*", type=str) 
    args = parser.parse_args()
   
    print(' '.join(args.link))
       

    file_viewer_logger(' '.join(args.link))

    # r'C:\Users\SBB2-–ï—Ä–º–∏–ª–æ–≤ –ê—Ä—Ç—ë–º\YandexDisk-artyomermiloff\GeegBrains\Programming\Technological specialization\Python Web Development\Python\Practice'